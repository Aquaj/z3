#!/usr/bin/env ruby

class Hash
  def compact
    ht = {}
    each do |k,v|
      ht[k] = v unless v.nil?
    end
    ht
  end
end

require_relative "../lib/z3"

class Kakuro
  def initialize(data)
    data = data.strip.split("\n").map do |line|
      line.split.map{|cell| parse_cell(cell)}
    end
    @xsize = data[0].size
    @ysize = data.size
    @data  = map_coordinates{|x,y| data[y][x]}
    @solver = Z3::Solver.new
  end

  def solve!
    @cells = map_coordinates{|x,y| cell_var(x,y) if @data[[x,y]] == nil}.compact

    (0...@ysize).each do |y|
      (0...@xsize).each do |x|
        cell = @data[[x,y]]
        next if cell == nil
        (a,b) = cell
        setup_line!(x,y,0,1,a)
        setup_line!(x,y,1,0,b)
      end
    end

    if @solver.check() == :sat
      @model = @solver.model
      print_board!
    else
      puts "failed to solve"
    end
  end

  private

  def map_coordinates
    Hash[(0...@xsize).to_a.product((0...@ysize).to_a).map{|x,y| [[x,y],yield(x,y)]}]
  end

  def print_board!
    (0...@ysize).each do |y|
      (0...@xsize).each do |x|
        cell = @data[[x,y]]
        if cell == nil
          if @model and @cells.has_key?([x,y])
            a = @model[@cells[[x,y]]].to_s
            print(" [#{a}] ")
          else
            print("  _  ")
          end
        elsif cell == [0,0]
          print("  x  ")
        else
          (a,b) = cell
          a = if a == 0 then "  " else ("%2d" % a) end
          b = if b == 0 then "  " else ("%-2d" % b) end
          print("#{a}/#{b}")
        end
        print " "
      end
      print "\n"
    end
  end

  def parse_cell(cell)
    if cell == "_"
      nil
    elsif cell == "x"
      [0,0]
    else
      a,b = cell.split("/")
      [a.to_i, b.to_i]
    end
  end

  def cell_var(x,y)
    v = Z3.Int("c#{x},#{y}")
    @solver.assert v >= 1
    @solver.assert v <= 9
    v
  end

  def setup_line!(x0, y0, dx, dy, sum)
    return if sum == 0
    vs = []
    x, y = x0+dx, y0+dy
    while @cells.has_key?([x,y])
      vs << @cells[[x,y]]
      x += dx
      y += dy
    end
    return if vs.empty?
    @solver.assert Z3.Distinct(*vs)
    @solver.assert Z3.Add(*vs) == sum
  end
end

Kakuro.new(
"""
  x     x     x   10/   24/   29/     x   11/   21/   10/
  x   11/   19/24   _     _     _     /6    _     _     _
  /31   _     _     _     _     _   10/20   _     _     _
  /4    _     _   22/18   _     _     _   23/13   _     _
  /18   _     _     _   24/26   _     _     _     _     _
  x   19/   30/16   _     _   10/11   _     _   11/   20/
  /34   _     _     _     _     _   23/23   _     _     _
  /7    _     _    9/16   _     _     _    3/4    _     _
  /24   _     _     _     /23   _     _     _     _     _
  /10   _     _     _     /11   _     _     _     x     x
"""
).solve!
