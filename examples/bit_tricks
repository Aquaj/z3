#!/usr/bin/env ruby

require_relative "../lib/z3"

def validate_sign_by_shift!
  """
  sign = v >> (sizeof(int) * CHAR_BIT - 1);
  """
  solver = Z3::Solver.new
  v = Z3.Bitvec("v", 32)
  s = v >> 31
  puts "Validating sign trick:"
  solver.prove! (v.signed_lt(0) & (s == -1)) | (v.signed_ge(0) & (s == 0))
end

def validate_opposite_sign_by_xor!
  """
  int x, y;               // input values to compare signs
  bool f = ((x ^ y) < 0); // true iff x and y have opposite signs
  """
  solver = Z3::Solver.new
  x = Z3.Bitvec("x", 32)
  y = Z3.Bitvec("y", 32)
  f = (x^y).signed_lt(0)

  puts "Validating sign trick:"
  solver.prove!(
    Z3.Or(
      Z3.And(x.signed_ge(0), y.signed_ge(0), f == false),
      Z3.And(x.signed_lt(0), y.signed_lt(0), f == false),
      Z3.And(x.signed_ge(0), y.signed_lt(0), f == true),
      Z3.And(x.signed_lt(0), y.signed_ge(0), f == true),
    )
  )
end

def validate_abs_without_branching_1!
  """
  int v;           // we want to find the absolute value of v
  unsigned int r;  // the result goes here
  int const mask = v >> sizeof(int) * CHAR_BIT - 1;
  r = (v + mask) ^ mask;
  """
  solver = Z3::Solver.new
  v = Z3.Bitvec("v", 32)
  mask = v >> 31
  r = (v + mask) ^ mask
  puts "Validating abs without branching, version 1"
  solver.prove!(
    Z3.Or(
      Z3.And(v.signed_ge(0), r== v),
      Z3.And(v.signed_lt(0), r==-v)
    )
  )
end

def validate_abs_without_branching_2!
  """
  int v;           // we want to find the absolute value of v
  unsigned int r;  // the result goes here
  int const mask = v >> sizeof(int) * CHAR_BIT - 1;
  r = (v ^ mask) - mask;
  """
  solver = Z3::Solver.new
  v = Z3.Bitvec("v", 32)
  mask = v >> 31
  r = (v^mask) - mask
  puts "Validating abs without branching, version 2"
  solver.prove!(
    Z3.Or(
      Z3.And(v.signed_ge(0), r==v),
      Z3.And(v.signed_lt(0), r==-v)
    )
  )
end

def c_boolean(solver, bool_expr, name)
  expr_val = Z3.Bitvec(name, 32)
  solver.assert(
    Z3.Or(
      Z3.And(bool_expr, expr_val == 1),
      Z3.And(~bool_expr, expr_val == 0),
    )
  )
  expr_val
end

def validate_min_without_branching!
  """
  int x;  // we want to find the minimum of x and y
  int y;
  int r;  // the result goes here
  r = y ^ ((x ^ y) & -(x < y)); // min(x, y)
  """
  solver = Z3::Solver.new
  x = Z3.Bitvec("x", 32)
  y = Z3.Bitvec("y", 32)
  r = y ^ ((x ^ y) & -c_boolean(solver, x.signed_lt(y), "t"))
  puts "Validating min without branching"
  solver.prove!(
    Z3.Or(
      Z3.And(x.signed_le(y), r == x),
      Z3.And(y.signed_le(x), r == y),
    )
  )
end

def validate_max_without_branching!
  """
  int x;  // we want to find the minimum of x and y
  int y;
  int r;  // the result goes here
  r = x ^ ((x ^ y) & -(x < y)); // max(x, y)
  """
  solver = Z3::Solver.new
  x = Z3.Bitvec("x", 32)
  y = Z3.Bitvec("y", 32)
  r = x ^ ((x ^ y) & -c_boolean(solver, x.signed_lt(y), "t"))
  puts "Validating max without branching"
  solver.prove!(
    Z3.Or(
      Z3.And(x.signed_gt(y), r == x),
      Z3.And(y.signed_ge(y), r == y),
    )
  )
end

def validate_is_power_of_two!
  """
  unsigned int v; // we want to see if v is a power of 2
  bool f;         // the result goes here

  f = (v & (v - 1)) == 0;
  """
  solver = Z3::Solver.new
  v = Z3.Bitvec("v", 32)
  f = (v & (v - 1)) == 0

  powers_of_two = (0..31).map{|i| 2**i}
  naive_is_f_power_of_two = Z3.Or(*powers_of_two.map{|k| v == k})

  puts "Validating is power of two"
  solver.prove!(
    Z3.Or(
      f == naive_is_f_power_of_two,
      v == 0,
    )
  )
end

validate_sign_by_shift!
validate_opposite_sign_by_xor!
validate_abs_without_branching_1!
validate_abs_without_branching_2!
validate_min_without_branching!
validate_max_without_branching!
validate_is_power_of_two!

"""
Based on https://graphics.stanford.edu/~seander/bithacks.html
"""
