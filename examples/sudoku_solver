#!/usr/bin/env ruby

require_relative "../lib/z3"

class SudokuSolver
  def initialize(data)
    @data = data
    @solver = Z3::Solver.new
  end

  def solve!
    @cells = (0..8).map do |j|
      (0..8).map do |i|
        cell_var(@data[j][i], i, j)
      end
    end

    @cells.each do |row|
      @solver.assert Z3::Ast.distinct(*row)
    end
    @cells.transpose.each do |column|
      @solver.assert Z3::Ast.distinct(*column)
    end

    @cells.each_slice(3) do |rows|
      rows.transpose.each_slice(3) do |square|
        @solver.assert Z3::Ast.distinct(*square.flatten)
      end
    end

    if @solver.check == :sat
      @model = @solver.model
      print_answer!
    else
      puts "failed to solve"
    end
  end

  private

  def cell_var(cell, i, j)
    v = Z3::Ast.int("cell[#{i+1},#{j+1}]")
    @solver.assert v >= 1
    @solver.assert v <= 9
    @solver.assert v == cell if cell != nil
    v
  end

  def print_answer!
    @cells.each do |row|
      puts row.map{|v| @model[v]}.join(" ")
    end
  end
end

_ = nil
sudoku = SudokuSolver.new([
  [_, 6, _, 5, _, 9, _, 4, _],
  [9, 2, _, _, _, _, _, 7, 6],
  [_, _, 1, _, _, _, 9, _, _],
  [7, _, _, 6, _, 3, _, _, 9],
  [_, _, _, _, _, _, _, _, _],
  [3, _, _, 4, _, 1, _, _, 7],
  [_, _, 6, _, _, _, 7, _, _],
  [2, 4, _, _, _, _, _, 6, 5],
  [_, 9, _, 1, _, 8, _, 3, _],
])
sudoku.solve!
