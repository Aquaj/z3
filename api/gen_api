#!/usr/bin/env ruby

require "pathname"
require_relative "definition"
require "set"

class GenerateAPI
  def initialize(*paths)
    @definitions = []
    paths.each do |path|
      add_file! Pathname(path)
    end
  end

  def run!
    puts ""
    (Pathname(__dir__) + "../lib/z3/very_low_level_auto.rb").open("w") do |fh|
      fh.puts 'module Z3'
      fh.puts '  module VeryLowLevel'
      fh.puts supported_definitions.map(&:ffi).join("\n")
      fh.puts '  end'
      fh.puts 'end'
    end

    (Pathname(__dir__) + "../lib/z3/low_level_auto.rb").open("w") do |fh|
      fh.puts 'module Z3'
      fh.puts '  module LowLevel'
      fh.puts '    class << self'
      fh.puts supported_definitions.map(&:api).join("\n")
      fh.puts '    end'
      fh.puts '  end'
      fh.puts 'end'
    end
  end

  def phantom_definitions
    @phantom_definitions ||= [
      # Not in library according to FFI
      "get_estimated_alloc_size",
      "get_string",
      "mk_array_ext",
      "solver_translate",
      "param_descrs_get_documentation",
      "mk_context",

      "is_string_sort",
      "mk_string_sort",
      "mk_string",
      "is_string",

      "is_re_sort",
      "mk_re_sort",
      "mk_re_option",
      "mk_re_plus",
      "mk_re_star",

      "is_seq_sort",
      "mk_seq_sort",
      "mk_seq_at",
      "mk_seq_contains",
      "mk_seq_empty",
      "mk_seq_in_re",
      "mk_seq_length",
      "mk_seq_prefix",
      "mk_seq_suffix",
      "mk_seq_to_re",
      "mk_seq_unit",
      "mk_seq_extract",
      "mk_seq_index",
      "mk_seq_replace",

      # Just C type casts, not needed
      "to_app",
      "to_func_decl",
      "pattern_to_ast",
      "sort_to_ast",
      "func_decl_to_ast",
      "app_to_ast",
      # Aliases
      "func_decl_to_string",
      "sort_to_string",

      # We just unpack and throw away, so we shouldn't need these
      "Z3_stats_inc_ref",
      "Z3_stats_dec_ref",
      "Z3_stats_to_string",

      # Extra constructors we'll never need
      "mk_fpa_numeral_float",

      # Aliases
      "mk_fpa_rna",
      "mk_fpa_rne",
      "mk_fpa_rtn",
      "mk_fpa_rtp",
      "mk_fpa_rtz",
    ].to_set
  end

  def supported_definitions
    @supported_definitions ||= begin
      @definitions
        .select(&:supported?)
        .reject{|d| phantom_definitions.include?(d.name)}
    end
  end

  private

  def add_definition!(definition)
    @definitions << Definition.new(definition)
  end

  def add_file!(path)
    path.readlines.grep(/def_API/).map(&:strip).each do |definition|
      add_definition! definition
    end
  end
end

if ARGV.empty?
  STDERR.puts "Usage: #{$0} path1.h path2.h [...]"
  exit 1
end

GenerateAPI.new(*ARGV).run!
