#!/usr/bin/env ruby

require "pathname"
require_relative "definition"


class GenerateAPI
  def initialize(*paths)
    @definitions = []
    paths.each do |path|
      add_file! Pathname(path)
    end
  end

  def indent(str, level)
    str.gsub(/^/, level).gsub(/ *$/, "")
  end

  def run!
    puts ""
    (Pathname(__dir__) + "../lib/z3/very_low_level_auto.rb").open("w") do |fh|
      fh.puts 'module Z3::VeryLowLevel'
      fh.puts indent(supported_definitions.map(&:ffi).join("\n"), "  ")
      fh.puts 'end'
    end

    (Pathname(__dir__) + "../lib/z3/low_level_auto.rb").open("w") do |fh|
      fh.puts 'module Z3::LowLevel'
      fh.puts '  class << self'
      fh.puts indent(supported_definitions.map(&:api).join("\n"), "    ")
      fh.puts '  end'
      fh.puts 'end'
    end
  end

  def phantom_definitions
    # Not in library according to FFI
    %W[
      get_estimated_alloc_size
      get_string
      mk_array_ext
      solver_translate
      param_descrs_get_documentation
      mk_context

      is_string_sort
      mk_string_sort
      mk_string
      is_string

      is_re_sort
      mk_re_sort
      mk_re_option
      mk_re_plus
      mk_re_star

      is_seq_sort
      mk_seq_sort
      mk_seq_at
      mk_seq_contains
      mk_seq_empty
      mk_seq_in_re
      mk_seq_length
      mk_seq_prefix
      mk_seq_suffix
      mk_seq_to_re
      mk_seq_unit
      mk_seq_extract
      mk_seq_index
      mk_seq_replace
    ]
  end

  def supported_definitions
    @supported_definitions ||= @definitions.select(&:supported?).reject{|d| phantom_definitions.include?(d.name)}
  end

  private

  def add_definition!(definition)
    @definitions << Definition.new(definition)
  end

  def add_file!(path)
    path.readlines.grep(/def_API/).map(&:strip).each do |definition|
      add_definition! definition
    end
  end
end

if ARGV.empty?
  STDERR.puts "Usage: #{$0} path1.h path2.h [...]"
  exit 1
end

GenerateAPI.new(*ARGV).run!
